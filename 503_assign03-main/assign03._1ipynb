{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true,
    "jupyter": {
     "outputs_hidden": true
    }
   },
   "outputs": [],
   "source": [
    "!python3 -m pip install plotly\n",
    "!python3 -m pip install chart_studio\n",
    "!python3 -m pip install nbformat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "import seaborn as sns\n",
    "import plotly.express as px\n",
    "import plotly.graph_objs as go\n",
    "import plotly.offline as py\n",
    "from plotly.subplots import make_subplots\n",
    "from scipy import signal\n",
    "\n",
    "\n",
    "\n",
    "def day_of_week_arrive_delay_pie_chart(data):\n",
    "    data = data.copy()\n",
    "    data = change_day_of_week_to_category(data)\n",
    "\n",
    "    fig = px.pie(data, values= 'ARR_DELAY', names='DATE', title='Arrive Dalay for different day in the week')\n",
    "    fig.update_traces(textposition='inside', textinfo='percent+label')\n",
    "    fig.show()\n",
    "\n",
    "    \n",
    "def heat_map_correlation_matrix(data):\n",
    "    data = data.copy()\n",
    "    data = data.drop(columns=['YEAR', 'MONTH', 'DAY_OF_MONTH', 'FL_NUM', 'AIRLINE_ID'])\n",
    "\n",
    "    # Compute the correlation matrix\n",
    "    corr = data.corr()\n",
    "    \n",
    "    fig = px.imshow(corr)\n",
    "    fig.update_layout(\n",
    "    width = 750, height = 750,\n",
    "    autosize = False )\n",
    "    fig.show()\n",
    "\n",
    "    \n",
    "def carrier_arrive_delay_day_of_week_box_plot(data):\n",
    "    new_data = data.copy()\n",
    "    \n",
    "    new_data = change_day_of_week_to_category(new_data)\n",
    "\n",
    "\n",
    "    fig = px.box(new_data,\n",
    "    x= 'CARRIER',\n",
    "    y='ARR_DELAY',\n",
    "    color = 'CARRIER',\n",
    "    facet_col=\"DATE\",\n",
    "    category_orders={\"DATE\": [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]},\n",
    "    title='Which day of the week got the most delay among all Carriers?')\n",
    "\n",
    "    fig.update_layout(\n",
    "    width = 1800, height = 900,\n",
    "    autosize = False )\n",
    "\n",
    "    fig.show()\n",
    "\n",
    "\n",
    "def every_carrier_arrive_delay_day_of_week_pie(data):\n",
    "    data = data.copy()\n",
    "    data = change_day_of_week_to_category(data)\n",
    "\n",
    "    carriers = set(data.loc[:, 'CARRIER'])\n",
    "\n",
    "    for i in carriers:\n",
    "        carrier_data = data[(data['CARRIER'] == '%s' %i)]\n",
    "        individual_carrier_pie(carrier_data, '%s' %i)\n",
    "\n",
    "\n",
    "def individual_carrier_pie(data, carrier_name):\n",
    "    fig = px.pie(data, values= 'ARR_DELAY', names='DATE', title='Arrive Dalay for carrier %s' %carrier_name)\n",
    "    fig.update_traces(textposition='inside', textinfo='percent+label')\n",
    "    fig.show()\n",
    "\n",
    "\n",
    "def change_day_of_week_to_category(new_data):\n",
    "    new_data = new_data.copy()\n",
    "    new_data['DATE'] = new_data['DAY_OF_WEEK']\n",
    "    new_data.loc[new_data['DAY_OF_WEEK'] == 1, 'DATE'] = \"Monday\"\n",
    "    new_data.loc[new_data['DAY_OF_WEEK'] == 2, 'DATE'] = \"Tuesday\"\n",
    "    new_data.loc[new_data['DAY_OF_WEEK'] == 3, 'DATE'] = \"Wednesday\"\n",
    "    new_data.loc[new_data['DAY_OF_WEEK'] == 4, 'DATE'] = \"Thursday\"\n",
    "    new_data.loc[new_data['DAY_OF_WEEK'] == 5, 'DATE'] = \"Friday\"\n",
    "    new_data.loc[new_data['DAY_OF_WEEK'] == 6, 'DATE'] = \"Saturday\"\n",
    "    new_data.loc[new_data['DAY_OF_WEEK'] == 7, 'DATE'] = \"Sunday\"\n",
    "    return new_data\n",
    "\n",
    "\n",
    "def delay_corre_no_AIR_TIME(df):\n",
    "    df = df.copy()\n",
    "\n",
    "    dayOfWeek={1:'Monday', 2:'Tuesday', 3:'Wednesday', 4:'Thursday', 5:'Friday', \n",
    "                                           6:'Saturday', 7:'Sunday'}\n",
    "\n",
    "    fig = make_subplots(rows=2, cols=6, shared_yaxes=True,\n",
    "    subplot_titles=(\"ARR\",\"CARRIER\", \"WEATHER\", \"NAS\", \"SECURITY\", \"LATE_AIRCRAFT\",\n",
    "    \"\", \"ARR corr CARRIER\", \"ARR corr WEATHER\", \"ARR corr NAS\", \"ARR corr SECURITY\", \"ARR corr LATE_AIRCRAFT\"))\n",
    "\n",
    "\n",
    "    dff0 = df.groupby('DAY_OF_WEEK').ARR_DELAY.mean().round(2)\n",
    "    \n",
    "    dff0.index = dff0.index.map(dayOfWeek)\n",
    "\n",
    "    trace0 = go.Scatter(\n",
    "        x=dff0.index,\n",
    "        y=dff0.values,\n",
    "        name = 'ARR_DELAY'\n",
    "    )\n",
    "\n",
    "    dff1 = df.groupby('DAY_OF_WEEK').CARRIER_DELAY.mean().round(2)\n",
    "    \n",
    "    dff1.index = dff1.index.map(dayOfWeek)\n",
    "\n",
    "    trace1 = go.Scatter(\n",
    "        x=dff1.index,\n",
    "        y=dff1.values,\n",
    "        name = 'CARRIER_DELAY',\n",
    "        # marker=dict(\n",
    "        #     color = 'red'\n",
    "        # )\n",
    "    )\n",
    "\n",
    "    dff2 = df.groupby('DAY_OF_WEEK').WEATHER_DELAY.mean().round(2)\n",
    "    dff2.index = dff2.index.map(dayOfWeek)\n",
    "\n",
    "    trace2 = go.Scatter(\n",
    "        x=dff2.index,\n",
    "        y=dff2.values,\n",
    "        name='WEATHER_DELAY',\n",
    "        # marker=dict(\n",
    "        #     color = 'blue'\n",
    "        # )\n",
    "    )\n",
    "\n",
    "    dff3 = df.groupby('DAY_OF_WEEK').NAS_DELAY.mean().round(2)\n",
    "    dff3.index = dff3.index.map(dayOfWeek)\n",
    "\n",
    "    trace3 = go.Scatter(\n",
    "        x=dff3.index,\n",
    "        y=dff3.values,\n",
    "        name='NAS_DELAY',\n",
    "        # marker=dict(\n",
    "        #     color = 'yellow'\n",
    "        # )\n",
    "    )\n",
    "\n",
    "    dff4 = df.groupby('DAY_OF_WEEK').SECURITY_DELAY.mean().round(2)\n",
    "    dff4.index = dff4.index.map(dayOfWeek)\n",
    "\n",
    "    trace4 = go.Scatter(\n",
    "        x=dff4.index,\n",
    "        y=dff4.values,\n",
    "        name='SECURITY_DELAY',\n",
    "        # marker=dict(\n",
    "        #     color = 'black'\n",
    "        # )\n",
    "    )\n",
    "\n",
    "    dff5 = df.groupby('DAY_OF_WEEK').LATE_AIRCRAFT_DELAY.mean().round(2)\n",
    "    dff5.index = dff5.index.map(dayOfWeek)\n",
    "\n",
    "    trace5 = go.Scatter(\n",
    "        x=dff5.index,\n",
    "        y=dff5.values,\n",
    "        name='LATE_AIRCRAFT_DELAY',\n",
    "        # marker=dict(\n",
    "        #     color = 'green'\n",
    "        # )\n",
    "    )\n",
    "\n",
    "    trace6 = go.Scatter(\n",
    "        x=dff1.index,\n",
    "        y=signal.convolve(dff0.values, dff1.values),\n",
    "        name='Corre ARR_DELAY CARRIER_DELAY'\n",
    "    )\n",
    "\n",
    "    trace7 = go.Scatter(\n",
    "        x=dff2.index,\n",
    "        y=signal.convolve(dff0.values, dff2.values),\n",
    "        name='Corre ARR_DELAY WEATHER_DELAY'\n",
    "    )\n",
    "\n",
    "    trace8 = go.Scatter(\n",
    "        x=dff3.index,\n",
    "        y=signal.convolve(dff0.values, dff3.values),\n",
    "        name='Corre ARR_DELAY NAS_DELAY'\n",
    "    )\n",
    "\n",
    "    trace9 = go.Scatter(\n",
    "        x=dff4.index,\n",
    "        y=signal.convolve(dff0.values, dff4.values),\n",
    "        name='Corre ARR_DELAY SECURITY_DELAY'\n",
    "    )\n",
    "\n",
    "    trace10 = go.Scatter(\n",
    "        x=dff5.index,\n",
    "        y=signal.convolve(dff0.values, dff5.values),\n",
    "        name='Corre ARR_DELAY LATE_AIRCRAFT_DELAY'\n",
    "    )\n",
    "\n",
    "\n",
    "\n",
    "    fig.append_trace(trace0, col=1, row=1)\n",
    "    fig.append_trace(trace1, col=2, row=1)\n",
    "    fig.append_trace(trace2, col=3, row=1)\n",
    "    fig.append_trace(trace3, col=4, row=1)\n",
    "    fig.append_trace(trace4, col=5, row=1)\n",
    "    fig.append_trace(trace5, col=6, row=1)\n",
    "\n",
    "    fig.append_trace(trace6, col=2, row=2)\n",
    "    fig.append_trace(trace7, col=3, row=2)\n",
    "    fig.append_trace(trace8, col=4, row=2)\n",
    "    fig.append_trace(trace9, col=5, row=2)\n",
    "    fig.append_trace(trace10, col=6, row=2)\n",
    "\n",
    "\n",
    "\n",
    "    # data = [trace1,trace2,trace3,trace4,trace5]\n",
    "    # layout = go.Layout(\n",
    "    #     title=' Mean of the Delay (Day of Week)', \n",
    "    #     yaxis = dict(title = 'Mean')\n",
    "    # )\n",
    "\n",
    "    # fig = go.Figure(data=data, layout=layout)\n",
    "    # fig.update_layout(barmode='relative', width = 900, height = 700, autosize = False )\n",
    "    fig.update_layout(height=1000, width=2000, title_text=\"Mean of the Delay (Day of Week)\")\n",
    "    fig.show()\n",
    "\n",
    "\n",
    "def delay_corre_AIR_TIME(df):\n",
    "    df = df.copy()\n",
    "\n",
    "    dayOfWeek={1:'Monday', 2:'Tuesday', 3:'Wednesday', 4:'Thursday', 5:'Friday', \n",
    "                                           6:'Saturday', 7:'Sunday'}\n",
    "\n",
    "    fig = make_subplots(rows=2, cols=6, shared_yaxes=True,\n",
    "    subplot_titles=(\"ARR\",\"CARRIER\", \"WEATHER\", \"NAS\", \"SECURITY\", \"LATE_AIRCRAFT\",\n",
    "    \"\", \"ARR corr CARRIER\", \"ARR corr WEATHER\", \"ARR corr NAS\", \"ARR corr SECURITY\", \"ARR corr LATE_AIRCRAFT\"))\n",
    "\n",
    "    dff0 = df.groupby('DAY_OF_WEEK').ARR_DELAY.mean().round(2)\n",
    "    dff_ = df.groupby('DAY_OF_WEEK').AIR_TIME.mean().round(2)\n",
    "    dff0.index = dff0.index.map(dayOfWeek)\n",
    "\n",
    "    trace0 = go.Scatter(\n",
    "        x=dff0.index,\n",
    "        y=dff0.values / dff_.values * 100,\n",
    "        name = 'ARR_DELAY'\n",
    "    )\n",
    "\n",
    "    dff1 = df.groupby('DAY_OF_WEEK').CARRIER_DELAY.mean().round(2)\n",
    "    dff_ = df.groupby('DAY_OF_WEEK').AIR_TIME.mean().round(2)\n",
    "    dff1.index = dff1.index.map(dayOfWeek)\n",
    "\n",
    "    trace1 = go.Scatter(\n",
    "        x=dff1.index,\n",
    "        y=dff1.values / dff_.values * 100,\n",
    "        name = 'CARRIER_DELAY',\n",
    "        # marker=dict(\n",
    "        #     color = 'red'\n",
    "        # )\n",
    "    )\n",
    "\n",
    "    dff2 = df.groupby('DAY_OF_WEEK').WEATHER_DELAY.mean().round(2)\n",
    "    dff_ = df.groupby('DAY_OF_WEEK').AIR_TIME.mean().round(2)\n",
    "\n",
    "    dff2.index = dff2.index.map(dayOfWeek)\n",
    "\n",
    "    trace2 = go.Scatter(\n",
    "        x=dff2.index,\n",
    "        y=dff2.values / dff_.values * 100,\n",
    "        name='WEATHER_DELAY',\n",
    "        # marker=dict(\n",
    "        #     color = 'blue'\n",
    "        # )\n",
    "    )\n",
    "\n",
    "    dff3 = df.groupby('DAY_OF_WEEK').NAS_DELAY.mean().round(2)\n",
    "    dff_ = df.groupby('DAY_OF_WEEK').AIR_TIME.mean().round(2)\n",
    "\n",
    "    dff3.index = dff3.index.map(dayOfWeek)\n",
    "\n",
    "    trace3 = go.Scatter(\n",
    "        x=dff3.index,\n",
    "        y=dff3.values / dff_.values * 100,\n",
    "        name='NAS_DELAY',\n",
    "        # marker=dict(\n",
    "        #     color = 'yellow'\n",
    "        # )\n",
    "    )\n",
    "\n",
    "    dff4 = df.groupby('DAY_OF_WEEK').SECURITY_DELAY.mean().round(2)\n",
    "    dff_ = df.groupby('DAY_OF_WEEK').AIR_TIME.mean().round(2)\n",
    "\n",
    "    dff4.index = dff4.index.map(dayOfWeek)\n",
    "\n",
    "    trace4 = go.Scatter(\n",
    "        x=dff4.index,\n",
    "        y=dff4.values / dff_.values * 100,\n",
    "        name='SECURITY_DELAY',\n",
    "        # marker=dict(\n",
    "        #     color = 'black'\n",
    "        # )\n",
    "    )\n",
    "\n",
    "    dff5 = df.groupby('DAY_OF_WEEK').LATE_AIRCRAFT_DELAY.mean().round(2)\n",
    "    dff_ = df.groupby('DAY_OF_WEEK').AIR_TIME.mean().round(2)\n",
    "\n",
    "    dff5.index = dff5.index.map(dayOfWeek)\n",
    "\n",
    "    trace5 = go.Scatter(\n",
    "        x=dff5.index,\n",
    "        y=dff5.values / dff_.values * 100,\n",
    "        name='LATE_AIRCRAFT_DELAY',\n",
    "        # marker=dict(\n",
    "        #     color = 'green'\n",
    "        # )\n",
    "    )\n",
    "\n",
    "    trace6 = go.Scatter(\n",
    "        x=dff1.index,\n",
    "        y=signal.convolve(dff0.values/ dff_.values * 100, dff1.values/ dff_.values * 100),\n",
    "        name='Corre ARR_DELAY CARRIER_DELAY'\n",
    "    )\n",
    "\n",
    "    trace7 = go.Scatter(\n",
    "        x=dff2.index,\n",
    "        y=signal.convolve(dff0.values/ dff_.values * 100, dff2.values/ dff_.values * 100),\n",
    "        name='Corre ARR_DELAY WEATHER_DELAY'\n",
    "    )\n",
    "\n",
    "    trace8 = go.Scatter(\n",
    "        x=dff3.index,\n",
    "        y=signal.convolve(dff0.values/ dff_.values * 100, dff3.values/ dff_.values * 100),\n",
    "        name='Corre ARR_DELAY NAS_DELAY'\n",
    "    )\n",
    "\n",
    "    trace9 = go.Scatter(\n",
    "        x=dff4.index,\n",
    "        y=signal.convolve(dff0.values/ dff_.values * 100, dff4.values/ dff_.values * 100),\n",
    "        name='Corre ARR_DELAY SECURITY_DELAY'\n",
    "    )\n",
    "\n",
    "    trace10 = go.Scatter(\n",
    "        x=dff5.index,\n",
    "        y=signal.convolve(dff0.values/ dff_.values * 100, dff5.values/ dff_.values * 100),\n",
    "        name='Corre ARR_DELAY LATE_AIRCRAFT_DELAY'\n",
    "    )\n",
    "\n",
    "\n",
    "\n",
    "    fig.append_trace(trace0, col=1, row=1)\n",
    "    fig.append_trace(trace1, col=2, row=1)\n",
    "    fig.append_trace(trace2, col=3, row=1)\n",
    "    fig.append_trace(trace3, col=4, row=1)\n",
    "    fig.append_trace(trace4, col=5, row=1)\n",
    "    fig.append_trace(trace5, col=6, row=1)\n",
    "\n",
    "    fig.append_trace(trace6, col=2, row=2)\n",
    "    fig.append_trace(trace7, col=3, row=2)\n",
    "    fig.append_trace(trace8, col=4, row=2)\n",
    "    fig.append_trace(trace9, col=5, row=2)\n",
    "    fig.append_trace(trace10, col=6, row=2)\n",
    "\n",
    "\n",
    "    fig.update_layout(height=1000, width=2000, title_text=\"Mean/AIR_TIME * 100 of the Delay (Day of Week)\")\n",
    "    fig.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] File ./Flights dataset.csv does not exist: './Flights dataset.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-307af9e61493>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m### read data as pandas Data Frame\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"./Flights dataset.csv\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m### remove useless column\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdrop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Unnamed: 35'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'CANCELLATION_CODE'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36mparser_f\u001b[0;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, dialect, error_bad_lines, warn_bad_lines, delim_whitespace, low_memory, memory_map, float_precision)\u001b[0m\n\u001b[1;32m    674\u001b[0m         )\n\u001b[1;32m    675\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 676\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_read\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilepath_or_buffer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    677\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    678\u001b[0m     \u001b[0mparser_f\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_read\u001b[0;34m(filepath_or_buffer, kwds)\u001b[0m\n\u001b[1;32m    446\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    447\u001b[0m     \u001b[0;31m# Create the parser.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 448\u001b[0;31m     \u001b[0mparser\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTextFileReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfp_or_buf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    449\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    450\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mchunksize\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0miterator\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, f, engine, **kwds)\u001b[0m\n\u001b[1;32m    878\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"has_index_names\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    879\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 880\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mengine\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    881\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    882\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mclose\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m_make_engine\u001b[0;34m(self, engine)\u001b[0m\n\u001b[1;32m   1112\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_make_engine\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mengine\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"c\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1113\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"c\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1114\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mCParserWrapper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moptions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1115\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1116\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mengine\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"python\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/opt/anaconda3/lib/python3.8/site-packages/pandas/io/parsers.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, src, **kwds)\u001b[0m\n\u001b[1;32m   1889\u001b[0m         \u001b[0mkwds\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"usecols\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0musecols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1890\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1891\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mparsers\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTextReader\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwds\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1892\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reader\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munnamed_cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1893\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader.__cinit__\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;32mpandas/_libs/parsers.pyx\u001b[0m in \u001b[0;36mpandas._libs.parsers.TextReader._setup_parser_source\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] File ./Flights dataset.csv does not exist: './Flights dataset.csv'"
     ]
    }
   ],
   "source": [
    "\n",
    "    ### read data as pandas Data Frame\n",
    "    data = pd.read_csv(\"./Flights dataset.csv\")\n",
    "\n",
    "    ### remove useless column\n",
    "    data = data.drop(['Unnamed: 35', 'CANCELLATION_CODE'], axis=1)\n",
    "\n",
    "    ### discard na\n",
    "    data = data.dropna()\n",
    "    # print(data)\n",
    "\n",
    "    heat_map_correlation_matrix(data)\n",
    "    day_of_week_arrive_delay_pie_chart(data)\n",
    "    carrier_arrive_delay_day_of_week_box_plot(data)\n",
    "    delay_corre_no_AIR_TIME(data)\n",
    "    delay_corre_AIR_TIME(data)\n",
    "\n",
    "    # every_carrier_arrive_delay_day_of_week_pie(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
